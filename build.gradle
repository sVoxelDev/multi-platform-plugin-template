buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.0' apply false
    id 'kr.entree.spigradle' version '2.3.4' apply false
    id 'io.freefair.lombok' version '6.3.0' apply false
    id 'org.cadixdev.licenser' version '0.6.1' apply false
}

subprojects {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'org.cadixdev.licenser'
    apply plugin: 'jacoco'
    apply plugin: 'java-library'
    apply plugin: 'java-test-fixtures'
    apply plugin: 'idea'

    apply from: "$rootDir/gradle/jacoco.gradle"
    apply from: "$rootDir/gradle/publish.gradle"

    if (project.hasProperty("local_script")) {
        apply from: file(local_script + "/build.local.gradle")
    }

    sourceCompatibility = 17
    targetCompatibility = 17

    archivesBaseName = project.property("pluginName")
    group project.property("group")

    ext {
        mcVersion = project.property("mcVersion")
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs += ["-parameters"]
        options.fork = true
        options.forkOptions.executable = 'javac'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = 'https://jitpack.io' }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    dependencies {
        api 'net.kyori:adventure-api:4.9.3'

        implementation 'org.jetbrains:annotations:22.0.0'

        // Test dependencies
        testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
        testImplementation 'org.mockito:mockito-core:4.0.0'
        testImplementation 'org.assertj:assertj-core:3.21.0'

        testFixturesImplementation 'org.mockito:mockito-core:4.0.0'
        testFixturesImplementation 'org.assertj:assertj-core:3.21.0'
        testFixturesImplementation 'org.apache.commons:commons-lang3:3.12.0'
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "skipped", "failed"
        }
        ignoreFailures = false
    }

    processResources {
        project.properties.put("version", this.version)
        expand project.properties
    }

    license {
        header = rootProject.file("HEADER.txt")
        include '**/*.java'
        newLine = true
    }

    defaultTasks 'licenseFormat', 'build'
}